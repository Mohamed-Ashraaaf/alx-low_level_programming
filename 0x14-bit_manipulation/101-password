
Scorpion007@Kira MINGW64 /
$ ssh 1fc6d8908927@1fc6d8908927.fddba5f9.alx-cod.online
1fc6d8908927@1fc6d8908927.fddba5f9.alx-cod.online's password:
root@1fc6d8908927:/# cd /root
root@1fc6d8908927:~# cd alx-low_level_programming
root@1fc6d8908927:~/alx-low_level_programming# mkdir 0x14-bit_manipulation
root@1fc6d8908927:~/alx-low_level_programming# cd 0x14-bit_manipulation
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > README.md
Bit manipulation ALX tasks
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > main.h
#ifndef MAIN_H
#define MAIN_H

unsigned int binary_to_uint(const char *b);
void print_binary(unsigned long int n);
int get_bit(unsigned long int n, unsigned int index);
int set_bit(unsigned long int *n, unsigned int index);
int clear_bit(unsigned long int *n, unsigned int index);
unsigned int flip_bits(unsigned long int n, unsigned long int m);
int _atoi(const char *s);
int _putchar(char c);
int get_endianness(void);

#endif
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# betty main.h

========== main.h ==========
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > 0-binary_to_uint.c
#include "main.h"
/**
 * binary_to_uint - Entry Point
 * @b: const char
 * Return: 0
 */
unsigned int binary_to_uint(const char *b)
{
        unsigned int res = 0;
        int base = 1, i = 0;

        if (b == NULL)
                return (0);

        while (b[i + 1])
        {
                if (b[i] != '0' && b[i] != '1')
                        return (0);
                i++;
        }

        while (i >= 0)
        {
                res += ((b[i] - '0') * base);
                base *= 2;
                i--;
        }


        return (res);

}
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# betty 0-binary_to_uint.c

========== 0-binary_to_uint.c ==========
binary_to_uint
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > 1-print_binary.c
#include "main.h"
#include <unistd.h>
#include <limits.h>
/**
 * print_binary - print an unsigned int in binary
 *
 * @n:
 *
 * Return: void
 */
void print_binary(unsigned long int n)
{
        unsigned long int printbit = 1ul << 63;
        char c = '0';

        while (!(printbit & n) && printbit != 0)
                printbit = printbit >> 1;

        if (printbit == 0)
                write(1, &c, 1);

        while (printbit)
        {
                if (printbit & n)
                        c = '1';
                else
                        c = '0';
                write(1, &c, 1);
                printbit = printbit >> 1;
        }
}
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# betty 1-print_binary.c

========== 1-print_binary.c ==========
print_binary
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > 2-get_bit.c
#include "main.h"
/**
 * get_bit - Entry Point
 * @n: input
 * @index: index
 * Return: 0
 */
int get_bit(unsigned long int n, unsigned int index)
{
        unsigned long int m;

        if (index > 63)
                return (-1);

        m = 1 << index;
        return ((n & m) > 0);
}
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# betty 2-get_bit.c

========== 2-get_bit.c ==========
get_bit
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > 3-set_bit.c
#include "main.h"
/**
 * set_bit - Entry Point
 * @n: input
 * @index: index
 * Return: 0
 */
int set_bit(unsigned long int *n, unsigned int index)
{
        if (index > 63)
                return (-1);

        *n = *n | 1ul << index;
        return (1);
}
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# betty 3-set_bit.c

========== 3-set_bit.c ==========
set_bit
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > 4-clear_bit.c
#include "main.h"
/**
 * clear_bit - Entry Point
 * @n: input
 * @index: index
 * Return: 0
 */
        int clear_bit(unsigned long int *n, unsigned int index)
{
        if (index > 63)
                return (-1);

        *n = *n & ~(1ul << index);
        return (1);
}
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# betty 4-clear_bit.c

========== 4-clear_bit.c ==========
clear_bit
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > 5-flip_bits.c
#include "main.h"
/**
 * flip_bits - flip to get from one number to another
 * @n: input
 * @m: bits
 * Return: 0
 */
unsigned int flip_bits(unsigned long int n, unsigned long int m)
{
        unsigned int count = 0;

        while (n != 0 || m != 0)
        {
                if ((n & 1) != (m & 1))
                        count++;
                m = m >> 1;
                n = n >> 1;
        }

        return (count);

}
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# betty 5-flip_bits.c

========== 5-flip_bits.c ==========
flip_bits
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation#
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > 100-get_endianness.c
#include "main.h"
/**
 * get_endianness - return the endianness of the machine
 *
 * Return: 0 for big endian, 1 for little endian
 */
int get_endianness(void)
{
        int n = 1;

        return (*((char *) &n) + '0');
}
^C
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# betty 100-get_endianness.c

========== 100-get_endianness.c ==========
get_endianness
root@1fc6d8908927:~/alx-low_level_programming/0x14-bit_manipulation# cat > 101-password
